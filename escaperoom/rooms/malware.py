"""
Room 5 — Malware Lab
Detects malicious process chains ending in curl or scp.
"""

import json
from collections import deque


class ProcessTree:
    def __init__(self, jsonl_file: str):
        self.processes = {}   # pid -> process data
        self.children = {}    # ppid -> list of child pids
        self._load(jsonl_file)

    def _load(self, jsonl_file: str):
        with open(jsonl_file, 'r') as f:
            for line in f:
                if not line.strip():
                    continue
                try:
                    proc = json.loads(line)
                    pid = proc.get("pid")
                    ppid = proc.get("ppid")
                    if pid is None:
                        continue
                    self.processes[pid] = proc
                    if ppid is not None:
                        self.children.setdefault(ppid, []).append(pid)
                except json.JSONDecodeError:
                    continue

    def dfs_find_target(self, start_pid: int, targets):
        visited = set()

        def dfs(pid, path):
            if pid in visited:
                return None
            visited.add(pid)
            cmd = self.processes.get(pid, {}).get("cmd", "")
            if any(t in cmd for t in targets):
                return pid, path + [pid], cmd
            for child in self.children.get(pid, []):
                result = dfs(child, path + [pid])
                if result:
                    return result
            return None

        return dfs(start_pid, [])

    def bfs_find_target(self, start_pid: int, targets):
        visited = {start_pid}
        queue = deque([(start_pid, [start_pid])])
        while queue:
            pid, path = queue.popleft()
            cmd = self.processes.get(pid, {}).get("cmd", "")
            if any(t in cmd for t in targets):
                return pid, path, cmd
            for child in self.children.get(pid, []):
                if child not in visited:
                    visited.add(child)
                    queue.append((child, path + [child]))
        return None


def format_evidence(pid, path, cmd):
    path_str = "->".join(map(str, path))
    return f"TOKEN[PID]={pid}\nEVIDENCE[PID].PATH=[{path_str}]\nEVIDENCE[PID].CMD=\"{cmd}\""


def main():
    JSONL_FILE = "proc_tree.jsonl"
    START_PID = 1000   # ← Replace with the PID given in your lab
    TARGETS = ["curl", "scp"]

    tree = ProcessTree(JSONL_FILE)

    # DFS
    dfs_result = tree.dfs_find_target(START_PID, TARGETS)
    if dfs_result:
        pid, path, cmd = dfs_result
        print(format_evidence(pid, path, cmd))
        return

    # BFS fallback
    bfs_result = tree.bfs_find_target(START_PID, TARGETS)
    if bfs_result:
        pid, path, cmd = bfs_result
        print(format_evidence(pid, path, cmd))
    else:
        print("No malicious process found.")


if __name__ == "__main__":
    main()
